!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define([],e):"object"==typeof exports?exports.MyPromise=e():t.MyPromise=e()}(self,(function(){return(()=>{"use strict";var t={d:(e,s)=>{for(var o in s)t.o(s,o)&&!t.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:s[o]})},o:(t,e)=>Object.prototype.hasOwnProperty.call(t,e),r:t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})}},e={};t.r(e),t.d(e,{default:()=>c});const s="fulfilled",o="pending",r="rejected";function i(t,e,s,o){if(e===t)return o(new TypeError("Chaining cycle detected for promise"));let r;if(null==e||"object"!=typeof e&&"function"!=typeof e)s(e);else try{let c=e.then;"function"==typeof c?c.call(e,(e=>{r||(r=!0,i(t,e,s,o))}),(t=>{r||(r=!0,o(t))})):s(e)}catch(t){if(r)return;r=!0,o(t)}}const c=class{constructor(t){this.resolveCallbacks=[],this.rejectCallbacks=[],this.status=o,this.value=void 0,this.reason=void 0,this.resolve=t=>{this.status===o&&(this.value=t,this.status=s,this.resolveCallbacks.forEach((t=>{t(this.value)})))},this.reject=t=>{this.status===o&&(this.reason=t,this.status=r,this.rejectCallbacks.forEach((t=>{t(this.reason)})))};try{t(this.resolve,this.reject)}catch(t){this.reject(t)}}then(t,e){t="function"==typeof t?t:t=>t,e="function"==typeof e?e:t=>{throw t};const c=new Promise(((l,a)=>{this.status===s&&setTimeout((()=>{try{let e=t(this.value);i(c,e,l,a)}catch(t){a(t)}}),0),this.status===r&&setTimeout((()=>{try{let t=e(this.reason);i(c,t,l,a)}catch(t){a(t)}}),0),this.status===o&&(this.resolveCallbacks.push((()=>{setTimeout((()=>{try{let e=t(this.value);i(c,e,l,a)}catch(t){a(t)}}),0)})),this.rejectCallbacks.push((()=>{setTimeout((()=>{try{let t=e(this.value);i(c,t,l,a)}catch(t){a(t)}}),0)})))}));return c}};return e})()}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,